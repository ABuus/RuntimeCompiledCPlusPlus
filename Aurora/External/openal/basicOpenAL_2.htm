
<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=windows-1252">
<meta name="GENERATOR" content="Microsoft FrontPage 4.0">
<meta name="ProgId" content="FrontPage.Editor.Document">
<link rel="stylesheet" type="text/css" href="../../../fotis_style.css">
</head>

<body>
<p align="center">
<SCRIPT LANGUAGE="JAVASCRIPT">
<!--
// Copyright 1997,1998,1999 Engage Media Corporation 
    FlycastNow = new Date();
    FlycastRandom   = FlycastNow.getTime() % 10000000;
    document.write('<A TARGET=_blank HREF="http://ad-adex3.flycast.com/server/click/thedevelopersgallery/general/' + FlycastRandom + '">');
    document.write('<IMG WIDTH=468 HEIGHT=60 BORDER=0 SR' + 'C="http://ad-adex3.flycast.com/server/ad/thedevelopersgallery/general/' + FlycastRandom + '"></A>');
//-->
</SCRIPT>

<NOSCRIPT>
<IFRAME WIDTH=468 HEIGHT=60 SRC="http://ad-adex3.flycast.com/server/iframe/thedevelopersgallery/general/123456" SCROLLING="no" MARGINWIDTH=0 MARGINHEIGHT=0 FRAMEBORDER=0 VSPACE=0 HSPACE=0 >
 <a HREF="http://ad-adex3.flycast.com/server/click/thedevelopersgallery/general/123456" target="_blank">
<IMG BORDER=0 WIDTH=468 HEIGHT=60 SRC="http://ad-adex3.flycast.com/server/thedevelopersgallery/general/123456"></a>
</IFRAME>
</NOSCRIPT>
 &nbsp;
<hr>
<p>To have the OpenAL functionality in our program we first need to include some
header files (we also need to include the header glut.h to have GLUT and OpenGL
functionality):</p>
<pre>
#include &lt;GL/glut.h&gt;
#include &lt;AL/al.h&gt;
#include &lt;AL/alut.h&gt;

#ifdef __linux  /* if we are compiling under linux */
  #include <stdlib.h>
  #define AL_LOOPING AL_SOURCE_LOOPING_LOKI
#endif /* __linux */
</pre>
<p>Then, as you see we check if we compile under linux and if so we include an
extra library and redefine <b>AL_LOOPING</b> as in linux it is defined as <b>AL_SOURCE_LOOPING_LOKI</b>.
Then we make some further definitions:</p>
<pre>#include &lt;stdio.h&gt;

#define NUM_BUFFERS 3
#define NUM_SOURCES 3
#define NUM_ENVIRONMENTS 1
&nbsp;
ALuint buffer[NUM_BUFFERS];
ALuint source[NUM_SOURCES];
ALuint environment[NUM_ENVIRONMENTS];
</pre>
<p>From this three definitions, the first two, <b>NUM_BUFFERS</b> and <b>NUM_SOURCES</b>,
are of greater interest to this tutorial. As you probably guessed the second one
is the number of OpenAL sources that will exist in our program. The thing is
that every source has associated with it a buffer. You can think of the buffer
as the actual storage of the source, for example the place where the actual
sound (wave file) will be stored. The last variable is used to define the number
of environments we will use in our application. For the sake of simplicity only
one will be used in this tutorial. The environment is the place where things
like reverb and sound reflection are specified.</p>
<pre>ALfloat listenerPos[]={0.0,0.0,4.0};
ALfloat listenerVel[]={0.0,0.0,0.0};
ALfloat	listenerOri[]={0.0,0.0,1.0, 0.0,1.0,0.0};

ALfloat source0Pos[]={ -2.0, 0.0, 0.0};
ALfloat source0Vel[]={ 0.0, 0.0, 0.0};


ALfloat source1Pos[]={ 2.0, 0.0, 0.0};
ALfloat source1Vel[]={ 0.0, 0.0, 0.0};

ALfloat source2Pos[]={ 0.0, 0.0, -4.0};
ALfloat source2Vel[]={ 0.0, 0.0, 0.0};</pre>
<p>These variables are our listener and the three sources. As you can see their definitions
are similar to OpenGL's. The <b>listenerPos</b> specifies that our listener will
be 4 units away from the origin on the z-axis. <b>listenerVel </b>is used from
OpenAL to &quot;<i>synthesize the Doppler effect perceived by the Listener for
each source, based on the velocity of both Source and Listener relative to the
medium&quot; (</i>from OpenAL's specification<i>). </i>For simplicity both our
listener and sources will have a velocity of zero (0.0) in all three axes. The
variable <b>listenerOri</b> specifies the listeners orientation. Here our
listener is looking to the origin and his 'head' is towards the positive y-axis.&nbsp;</p>
<pre>int GLwin ;

ALsizei size,freq;
ALenum format;
ALvoid *data;
int ch;</pre>
<p>The just defined variables are used later to load the wave files (except the
first one that is used from <b>glutCreateWindow</b>.</p>
<pre>#ifdef __linux /* if we are under LINUX */
</pre>
<pre>static ALboolean alutLoadWAVFile(const char *fname,
			ALsizei *format,
                        ALvoid **wave,
			ALsizei *size,
			ALsizei *freq );

static ALboolean alutUnloadWAV(ALenum format,
			       ALvoid *wave,
			       ALsizei size,
			       ALsizei freq );
#endif</pre>
<p>This bit of code is needed in order to make the application compile and link
correctly under linux. This is because the ALUT functions <b>alutLoadWAVFile</b>
and&nbsp;<b> alutUnloadWAV</b> have a different signature (different number of
parameters and name) under linux. You will see the difference later when we
implement these two definitions. Following is our <b>init</b> function. In all
previous tutorials this function was quite short, but in this program many
OpenAL initializations must be done here.&nbsp;</p>
<p>This tutorial will not explain basic OpenGL functionality. If you have not
already read our excellent tutorial on OpenGL named &quot;<a href="../../opengl/book/c_index.htm">A
3D Case Study using OpenGL</a>&quot; do so know. </p>
<pre>void init(void)
{
	glClearColor(0.0,0.0,0.0,1.0) ;

	alListenerfv(AL_POSITION,listenerPos);
	alListenerfv(AL_VELOCITY,listenerVel);
	alListenerfv(AL_ORIENTATION,listenerOri);</pre>
<p>Here we set OpenGL's clear color to black and set our listener position,
velocity and orientation (we pass the previously defined variables to their
associated functions). Next we create our application's buffers:</p>
<pre>#ifdef __linux
	alGetError(); /* clear error */

	alGenBuffers(NUM_BUFFERS, buffer);
	if(alGetError() != AL_NO_ERROR) {
		printf(&quot;- Error creating buffers !!\n&quot;);
		exit(1);
	}
#else
	if (alGenBuffers(NUM_BUFFERS,buffer)!=NUM_BUFFERS)
	{
		printf(&quot;- Error creating buffers !!\n&quot;);
		exit(1);
	}
#endif</pre>
<p>This code does the same think in two different ways (for Linux and Windows).
It tries to create the application's buffers and exits the application if the
buffers are not created. Now that the buffers are created, is the time to load
our wave files into them:</p>
<pre>	alutLoadWAVFile(&quot;c.wav&quot;,&amp;format,&amp;data,&amp;size,&amp;freq);
	alBufferData(buffer[0],format,data,size,freq);
	alutUnloadWAV(format,data,size,freq);

	alutLoadWAVFile(&quot;b.wav&quot;,&amp;format,&amp;data,&amp;size,&amp;freq);
	alBufferData(buffer[1],format,data,size,freq);
	alutUnloadWAV(format,data,size,freq);

	alutLoadWAVFile(&quot;a.wav&quot;,&amp;format,&amp;data,&amp;size,&amp;freq);
	alBufferData(buffer[2],format,data,size,freq);
	alutUnloadWAV(format,data,size,freq);</pre>
<p>As you can see the same code is repeated three times (to load our three
sounds). First we load the wave file to memory using <b>alutLoadWAVFile</b>,
then we copy the data to our buffer with <b> alBufferData</b> and finally we
free the memory used with <b>alutUnloadWAV</b>. The format of <b>alutLoadWAVFile</b>
is (Char* ourSourcePath, ALenum waveFormat, ALvoid* waveData, ALsizei waveSize,
ALsizei waveFrequency).</p>
<p>Then we make sure that we are not under Linux (this functionality is not yet
implemented), we create our environment, associate it with our listener and set some of
its parameters (i.e reflections and reverb):</p>
<pre>#ifndef __linux
	if (alGenEnvironmentIASIG(NUM_ENVIRONMENTS,environment)!=NUM_ENVIRONMENTS)
	{
		printf(&quot;- Error creating environments !!\n&quot;);
		exit(1);
	}

	alListeneri(AL_ENVIRONMENT_IASIG,environment[0]);
	alEnvironmentfIASIG(environment[0],AL_ENV_ROOM_IASIG,1.0f);
	alEnvironmentfIASIG(environment[0],AL_ENV_REFLECTIONS_IASIG,1.0f);
	alEnvironmentfIASIG(environment[0],AL_ENV_REVERB_IASIG,1.0f);
#endif</pre>
<p>Then we create our sources:</p>
<pre>#ifdef __linux
	alGetError(); /* clear error */
	alGenSources(NUM_SOURCES, source);

	if(alGetError() != AL_NO_ERROR) {
		printf(&quot;- Error creating sources !!\n&quot;);
		exit(2);
	}
#else
	if (alGenSources(NUM_SOURCES,source)!=NUM_SOURCES)
	{
		printf(&quot;- Error creating sources !!\n&quot;);
		exit(2);
	}
#endif</pre>
<p>and finally we set the properties of the three created sources:</p>
<pre>	alSourcef(source[0],AL_PITCH,1.0f);
	alSourcef(source[0],AL_GAIN,1.0f);
	alSourcefv(source[0],AL_POSITION,source0Pos);
	alSourcefv(source[0],AL_VELOCITY,source0Vel);
	alSourcei(source[0],AL_BUFFER,buffer[0]);
	alSourcei(source[0],AL_LOOPING,AL_TRUE);

	alSourcef(source[1],AL_PITCH,1.0f);
	alSourcef(source[1],AL_GAIN,1.0f);
	alSourcefv(source[1],AL_POSITION,source1Pos);
	alSourcefv(source[1],AL_VELOCITY,source1Vel);
	alSourcei(source[1],AL_BUFFER,buffer[1]);
	alSourcei(source[1],AL_LOOPING,AL_TRUE);

	alSourcef(source[2],AL_PITCH,1.0f);
	alSourcef(source[2],AL_GAIN,1.0f);
	alSourcefv(source[2],AL_POSITION,source2Pos);
	alSourcefv(source[2],AL_VELOCITY,source2Vel);
	alSourcei(source[2],AL_BUFFER,buffer[2]);
	alSourcei(source[2],AL_LOOPING,AL_TRUE);

}</pre>
<p>Ok, first we set the sound pitch and gain, then we define the source's
position and orientation in the 3D space and finally we associate its source
with its buffer and make it loop through the wave file. We do the same for all
three sources. This was the <b>init()</b> function. Following you can find the
display function. This is a simple OpenGL display function that creates and
shows a cube for every source and listener in the scene. </p>
<pre>void display(void)
{
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT) ;
   glPushMatrix() ;</pre>
<pre>&nbsp;</pre>
<pre>	/*rotate the scene 20- degrees on the x and y axes to depict better the perspective*/
	glRotatef(20.0,1.0,1.0,0.0) ;

	glPushMatrix() ;
	glTranslatef(source0Pos[0],source0Pos[1],source0Pos[2]) ;
	glColor3f(1.0,0.0,0.0) ;
	glutWireCube(0.5) ;
	glPopMatrix() ;

	glPushMatrix() ;
	glTranslatef(source2Pos[0],source2Pos[1],source2Pos[2]) ;
	glColor3f(0.0,0.0,1.0) ;
	glutWireCube(0.5) ;
	glPopMatrix() ;

	glPushMatrix() ;
	glTranslatef(source1Pos[0],source0Pos[1],source0Pos[2]) ;
	glColor3f(0.0,1.0,0.0) ;
	glutWireCube(0.5) ;
	glPopMatrix() ;

	//the listener
	glPushMatrix() ;
	glTranslatef(listenerPos[0],listenerPos[1],listenerPos[2]) ;
        glColor3f(1.0,1.0,1.0) ;
	glutWireCube(0.5) ;
	glPopMatrix() ;

   glPopMatrix() ;
	glutSwapBuffers() ;
}</pre>
<p>As you can see for every cube we set a different color and then move
(translate) it using&nbsp; the sound sources location. So we will have three
cubes on the same place the three sources are and a forth white cube at the
listeners place. Next you can find a very simple OpenGL <b>reshape </b>function:</p>
<pre>void reshape(int w, int h) // the reshape function
{
   glViewport(0,0,(GLsizei)w,(GLsizei)h) ;
   glMatrixMode(GL_PROJECTION) ;
   glLoadIdentity() ;
   gluPerspective(60.0,(GLfloat)w/(GLfloat)h,1.0,30.0) ;
   glMatrixMode(GL_MODELVIEW) ;
   glLoadIdentity() ;
   glTranslatef(0.0,0.0,-6.6) ;
}</pre>
<p>Next you can find the <b>keyboard</b> function:</p>
<pre>void keyboard(unsigned char key, int x, int y) 
{
	switch(key)
	{
		case '1':
			alSourcePlay(source[0]);
			break;
		case '2':
			alSourcePlay(source[1]);
			break;
		case '3':
			alSourcePlay(source[2]);
			break;
		case '4':
			alSourceStop(source[0]);
			break;
		case '5':
			alSourceStop(source[1]);
			break;
		case '6':
			alSourceStop(source[2]);
			break;
		case 'a':
		case 'A':
			listenerPos[0] -= 0.1 ;
			alListenerfv(AL_POSITION,listenerPos);

			break ;
		case 's':
		case 'S':
			listenerPos[0] += 0.1 ;
			alListenerfv(AL_POSITION,listenerPos);

			break ;
		case 'q':
		case 'Q':
			listenerPos[2] -= 0.1 ;
			alListenerfv(AL_POSITION,listenerPos);

			break ;
		case 'z':
		case 'Z':
			listenerPos[2] += 0.1 ;
			alListenerfv(AL_POSITION,listenerPos);

			break ;
		default:</pre>
<pre>			alSourceStop(source[2]);
			alSourceStop(source[1]);
			alSourceStop(source[0]);

			alutExit();
			glutDestroyWindow(GLwin) ;
			exit(0) ;
			break ;
	}
	glutPostRedisplay() ;
}</pre>
<p>As you can see the following functionality is coded here: the keys 1, 2, and
3 will start playing the&nbsp; three sounds (you can stop them by respectively
pressing 4, 5, and 6). With 'q' and 'z' you can move the listener on the
z-axis&nbsp; and with 'a' and 's' on the x-axis. Pressing any other key (the
default statement of the switch) will terminate the application calling the
following functions in this sequence:</p>
<ul>
  <li>stop the three sounds (even if they are stopped already, does not matter)</li>
  <li>de-initialise alut</li>
  <li>destroy the GLUT made window</li>
  <li>exit the program by calling exit(0)</li>
</ul>
<p>A very important thing to notice in this function is the use of the <b>alListenerfv</b>.
When a user presses 's' for example two things happen: First the variable <b>listenerPos[0]
</b>is incremented (the 's' key moves the listener to the right of the scene, so
we have to increment its x-axis position), then <b>alListenerfv</b> is called to
'tell' OpenAL that the listener was moved.&nbsp;</p>
<ul>
  <li>&nbsp; listenerPos[0] += 0.1 ;<br>
    alListenerfv(AL_POSITION,listenerPos);<br>
  </li>
</ul>
<p>At this point we are nearly finished. Remaining is the <b>main</b> function
and the previously defined, but not implemented Linux alut functions:</p>
<pre>int main(int argc, char** argv) //finaly the main function
{
	//initialise glut
	glutInit(&amp;argc, argv) ;
	glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB | GLUT_DEPTH) ;   
	glutInitWindowSize(400,400) ;

	//initialise openAL
	alutInit(&amp;argc, argv) ; 

	GLwin = glutCreateWindow(&quot;OpenAL &amp; OpenGL | www.dev-gallery.com&quot;) ;
	init() ;
	glutDisplayFunc(display) ;
	glutKeyboardFunc(keyboard) ;
	glutReshapeFunc(reshape) ;

	glutMainLoop() ;

	return 0;
}</pre>
<p>The main function is very simple. GLUT is initialized, OpenAL is initialized
and a 400x400 GLUT window is created. The function <b>init()</b> is called to do
all previously explained initializations, and GLUT's callbacks are called (for
the <b>display, keyboard,</b> and <b>reshape</b>functions). Finally GLUT's main
loop is entered not to leave until the program is terminated.</p>
<p>Hopefully you found this tutorial helpful. If you have not already done so
you can <a href="../../../files/zips/my%20openAL.zip">download the source</a> as a Visual C++ 6.0 project.
The .cpp file that comes with it is compatible with Linux also.</p>
<p>Be sure to join our newsletter to get informed of any patches and updates (<a href="../../main.htm">from
the main page</a>)</p>
<hr>
<p>Fotis Chatzinikos, September 2000</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
</body>

</html>
